package dambi.nistalproject.controller;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import dambi.nistalproject.model.*;


@RestController // This means that this class is a Controller baina @Controller bakarrik jarrita, PUT eta DELETEak ez dabiz
@RequestMapping(path = "/home") // This means URL's start with /demo (after Application path)
public class MainController {

    @Autowired // This means to get the bean called umeaRepository
               // Which is auto-generated by Spring, we will use it to handle the data
    private MovieRepository movieRepository;

    @GetMapping(path = "/movies")
    public @ResponseBody Iterable<Movie> getAllMovies() {
        return movieRepository.findAll();
    }
    @PostMapping(path = "/newmovie") // Map ONLY POST Requests
    public @ResponseBody String addNewMovie(@RequestParam int movieId, @RequestParam String title) {
        Movie m = new Movie();
        m.setTitle(title);
        m.setMovieId(movieId);
        movieRepository.save(m);
        return "Saved";
    }
    
    @GetMapping(path = "/Actors")
    public @ResponseBody Iterable<Movie> getAllActors() {
        return movieRepository.findAll();
    }


    @PostMapping(path = "/newactor") // Map ONLY POST Requests
    public @ResponseBody String addNewActor(@RequestParam String name, @RequestParam String character) {
        Actor actor = new Actor();
        actor.setCharacter(character);
        actor.setName(name);
        movieRepository.save(actor);
        return "saved actor";

    }
}